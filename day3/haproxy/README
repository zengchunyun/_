这个程序是基于python3.x而写的，需要用python3以上版本执行

执行方式
python3 x_haproxy.py


 如果想直接运行，需要修改文件开头的运行环境
 如：#!/usr/bin/env python3
 然后加上可执行权限
  chmod a+x x_haproxy.py

  执行
  ./x_haproxy.py

1 查看配置模式
    通过序号方式查询
    可以查看到主区域配置下面的细节配置
    该模式仅允许查看,不允许修改或其他操作

2 添加配置模式
    进入该模式,直接输入新配置,即可进入对应的操作
    此模式涉及到服务的稳定运行,所以必须严格按照字典方式进行添加配置,
    以防操作不当,影响正常服务的使用,具体使用可以参照README文档

    示例:
    以下示例不保证配置内容的正确性,只是一个写入配置的方式,请结合实际需求进行变更
        2.1 {"backend": "oldboy.org","record":{"option": "forwardfor"}}
            该配置表示
                在主区域
                    backend oldboy.org
                下面添加具体的细节配置,如果不存在主区域配置,则会进行添加一条主区域配置记录
                    record
                只是一个标识键值,无特殊意义,可以使用自定义.
                最终会在这个主区域配置下面添加一条这样的记录
                    option forwardfor

        2.2 {"backend": "test.oldboy.org","record":{"server": "100.1.7.9","weight": 20,"maxconn": 30}}
            该配置表示
                在主区域
                    backend test.oldboy.org
                下面添加如下一条记录
                    server 100.1.7.9 100.1.7.9 weight 20 maxconn 30

        通过两条示例,你应该要明白,这个record的键值实际只针对一条记录的添加,如果想多次添加,也只能多次执行,
        后期会增加多条记录添加功能

3 修改配置模式
    该模式下,可以对主区域配置下面的任何具体细节配置进行修改操作
    注意: 该模式不能对主区域配置内容进行修改,也是为了避免不必要的错误产生
            如果强行要修改.只能通过下面介绍的删除功能进行删除后再添加

4 删除配置模式
    该模式与添加模式互斥操作,所以操作过程其实是完全一样的

    区别在于,要删除的具体配置细节精确到每一个空格,所以在配置文件中,我们要养成好习惯,同级配置下,仅使用一个空格隔开

    删除的记录不匹配,则返回 记录不存在操作,只有完全匹配才会进行删除操作

    此删除操作是针对具体配置的一个完整记录,而不是部分记录,如果发现配置存在多余空格,可以通过修改模式进行修改操作

以上任何改动的操作,都会备份上一次的操作,每次只备份上一次保存前的状态,还原只能手动还原


